type Query {
  config: Config!
  allState: [ServiceState!]!
}

type Mutation {
  setServiceState(teamName: String, serviceName: String!, state: State!): [ServiceState!]
}

type Subscription {
  config: Config!
  serviceStateChanged: ServiceState!
  forceReload: Boolean!
}

type Config {
  team: [Team!]!
  service: [Service!]!
  """
  updatedAt to prevent data race between subscription and query
  """
  updatedAt: Date!
}

type Team {
  name: String!
  ip: String!
}

type Service {
  name: String!
  normalPort: Int!
  stealthPort: Int!
}

type ServiceState {
  team: Team!
  service: Service!
  state: State!
  """
  updatedAt to prevent data race between subscription and query
  """
  updatedAt: Date!
}

enum State {
  Ignore
  Normal
  Stealth
}

scalar Date